@page "/counter"
@using ExcelToolsFrontend.Models
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@using ExcelToolsFrontend.Auth
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService _localStorage
@inject CustomAuthStateProvider AuthProvider

<div class="cards-container">
    @foreach (var item in processedFileHistory.OrderByDescending(x => x.ProcessedAt))
	{
		<div class="operation-card">
			<div class="card-header">
				<span class="date">@item.ProcessedAt.ToString("dd.MM.yyyy HH:mm")</span>
				<span class="file-id">ID: @item.FileId</span>
			</div>
			<div class="operation-type">@item.Operation</div>
		</div>
	}
</div>

@code {
    private List<ProcessedFileHistory> processedFileHistory = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int totalPages = 1;
    private const int PageSize = 10;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        var token = await _localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await LoadHistory();
        }
    }

    private async Task LoadHistory()
    {
        isLoading = true;
        StateHasChanged(); 

        try
        {
	        var response = await Http.GetAsync("api/user/history");

	        if (response.IsSuccessStatusCode)
	        {
		        processedFileHistory = await response.Content.ReadFromJsonAsync<List<ProcessedFileHistory>>() ?? new List<ProcessedFileHistory>();
	        }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке истории: {ex.Message}");
   
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

}
